{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Fine-tuning de Modelos de Linguagem com PEFT e LoRA\n",
    "\n",
    "Este notebook demonstra como realizar fine-tuning em diferentes modelos de linguagem usando PEFT (Parameter-Efficient Fine-Tuning) com LoRA (Low-Rank Adaptation)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "!pip install transformers datasets torch peft accelerate"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import torch\n",
    "from datasets import load_dataset\n",
    "from transformers import AutoTokenizer, AutoModelForCausalLM, TrainingArguments\n",
    "from transformers import DataCollatorForLanguageModeling\n",
    "from peft import get_peft_model, LoraConfig, TaskType, PeftModel\n",
    "from accelerate import Accelerator\n",
    "from torch.utils.data import DataLoader\n",
    "from tqdm import tqdm\n",
    "\n",
    "# Definindo o caminho do workspace\n",
    "WORKSPACE_PATH = \"/content/drive/MyDrive/fiap/tech-challenge-03/\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Função para selecionar o modelo e suas configurações\n",
    "def get_model_config(model_name):\n",
    "    if \"llama\" in model_name.lower():\n",
    "        return {\n",
    "            \"model_class\": AutoModelForCausalLM,\n",
    "            \"tokenizer_class\": AutoTokenizer,\n",
    "            \"lora_target_modules\": [\"q_proj\", \"v_proj\"],\n",
    "            \"load_in_8bit\": True,\n",
    "            \"device_map\": \"auto\"\n",
    "        }\n",
    "    elif \"gpt2\" in model_name.lower():\n",
    "        return {\n",
    "            \"model_class\": AutoModelForCausalLM,\n",
    "            \"tokenizer_class\": AutoTokenizer,\n",
    "            \"lora_target_modules\": [\"c_attn\", \"c_proj\"],\n",
    "            \"load_in_8bit\": False,\n",
    "            \"device_map\": None\n",
    "        }\n",
    "    else:\n",
    "        raise ValueError(f\"Configuração não definida para o modelo: {model_name}\")\n",
    "\n",
    "# Configurações gerais\n",
    "model_name = \"gpt2\"  # Altere para o modelo desejado\n",
    "max_length = 512\n",
    "batch_size = 4\n",
    "num_epochs = 1\n",
    "learning_rate = 2e-4\n",
    "\n",
    "# Obtendo configurações específicas do modelo\n",
    "model_config = get_model_config(model_name)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Inicializando o Accelerator\n",
    "accelerator = Accelerator()\n",
    "\n",
    "# Carregando o dataset\n",
    "dataset = load_dataset('json', data_files={'train': f'{WORKSPACE_PATH}trn.json'})\n",
    "dataset = dataset['train'].shuffle(seed=42).select(range(100000))  # Usando apenas 100k amostras\n",
    "\n",
    "def prepare_data(examples):\n",
    "    return {\n",
    "        'text': [f\"Title: {title}\\nContent: {content}\\nResponse:\" for title, content in zip(examples['title'], examples['content'])]\n",
    "    }\n",
    "\n",
    "dataset = dataset.map(prepare_data, batched=True, remove_columns=dataset.column_names)\n",
    "dataset = dataset.train_test_split(test_size=0.1)\n",
    "\n",
    "print(f\"Tamanho do conjunto de treinamento: {len(dataset['train'])}\")\n",
    "print(f\"Tamanho do conjunto de validação: {len(dataset['test'])}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Configuração do modelo e tokenizador\n",
    "tokenizer = model_config[\"tokenizer_class\"].from_pretrained(model_name)\n",
    "model = model_config[\"model_class\"].from_pretrained(\n",
    "    model_name, \n",
    "    load_in_8bit=model_config[\"load_in_8bit\"], \n",
    "    device_map=model_config[\"device_map\"]\n",
    ")\n",
    "\n",
    "tokenizer.pad_token = tokenizer.eos_token\n",
    "\n",
    "def tokenize_function(examples):\n",
    "    return tokenizer(examples['text'], truncation=True, padding='max_length', max_length=max_length)\n",
    "\n",
    "tokenized_datasets = dataset.map(tokenize_function, batched=True, remove_columns=['text'])\n",
    "data_collator = DataCollatorForLanguageModeling(tokenizer=tokenizer, mlm=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Configuração do LoRA\n",
    "peft_config = LoraConfig(\n",
    "    task_type=TaskType.CAUSAL_LM,\n",
    "    inference_mode=False,\n",
    "    r=8,\n",
    "    lora_alpha=32,\n",
    "    lora_dropout=0.05,\n",
    "    target_modules=model_config[\"lora_target_modules\"]\n",
    ")\n",
    "\n",
    "# Criando um novo modelo PEFT\n",
    "peft_model = get_peft_model(model, peft_config)\n",
    "print(peft_model.print_trainable_parameters())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Configuração do treinamento\n",
    "training_args = TrainingArguments(\n",
    "    output_dir=f'{WORKSPACE_PATH}results',\n",
    "    num_train_epochs=num_epochs,\n",
    "    per_device_train_batch_size=batch_size,\n",
    "    per_device_eval_batch_size=batch_size,\n",
    "    warmup_steps=100,\n",
    "    weight_decay=0.01,\n",
    "    logging_dir=f'{WORKSPACE_PATH}logs',\n",
    "    logging_steps=10,\n",
    "    evaluation_strategy=\"steps\",\n",
    "    eval_steps=500,\n",
    "    save_strategy=\"steps\",\n",
    "    save_steps=500,\n",
    "    load_best_model_at_end=True,\n",
    "    fp16=True,\n",
    "    gradient_accumulation_steps=8,\n",
    "    learning_rate=learning_rate,\n",
    ")\n",
    "\n",
    "# Preparando os dataloaders\n",
    "train_dataloader = DataLoader(\n",
    "    tokenized_datasets[\"train\"],\n",
    "    shuffle=True,\n",
    "    collate_fn=data_collator,\n",
    "    batch_size=training_args.per_device_train_batch_size\n",
    ")\n",
    "eval_dataloader = DataLoader(\n",
    "    tokenized_datasets[\"test\"],\n",
    "    collate_fn=data_collator,\n",
    "    batch_size=training_args.per_device_eval_batch_size\n",
    ")\n",
    "\n",
    "# Preparando o otimizador\n",
    "optimizer = torch.optim.AdamW(peft_model.parameters(), lr=training_args.learning_rate)\n",
    "\n",
    "# Preparando o scheduler\n",
    "lr_scheduler = torch.optim.lr_scheduler.StepLR(optimizer, step_size=500, gamma=0.1)\n",
    "\n",
    "# Preparando o modelo, otimizador, dataloaders e scheduler com o Accelerator\n",
    "peft_model, optimizer, train_dataloader, eval_dataloader, lr_scheduler = accelerator.prepare(\n",
    "    peft_model, optimizer, train_dataloader, eval_dataloader, lr_scheduler\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Loop de treinamento\n",
    "num_training_steps = num_epochs * len(train_dataloader)\n",
    "progress_bar = tqdm(range(num_training_steps))\n",
    "\n",
    "for epoch in range(num_epochs):\n",
    "    peft_model.train()\n",
    "    for batch in train_dataloader:\n",
    "        outputs = peft_model(**batch)\n",
    "        loss = outputs.loss\n",
    "        accelerator.backward(loss)\n",
    "        \n",
    "        optimizer.step()\n",
    "        lr_scheduler.step()\n",
    "        optimizer.zero_grad()\n",
    "        progress_bar.update(1)\n",
    "\n",
    "    # Avaliação\n",
    "    peft_model.eval()\n",
    "    eval_loss = 0\n",
    "    for batch in eval_dataloader:\n",
    "        with torch.no_grad():\n",
    "            outputs = peft_model(**batch)\n",
    "        loss = outputs.loss\n",
    "        eval_loss += loss.detach().float()\n",
    "    eval_loss /= len(eval_dataloader)\n",
    "    print(f\"Epoch {epoch+1}: Eval Loss: {eval_loss}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Salvando o modelo\n",
    "accelerator.wait_for_everyone()\n",
    "unwrapped_model = accelerator.unwrap_model(peft_model)\n",
    "unwrapped_model.save_pretrained(\n",
    "    f\"{WORKSPACE_PATH}peft_model_optimized\",\n",
    "    is_main_process=accelerator.is_main_process,\n",
    "    save_function=accelerator.save\n",
    ")\n",
    "if accelerator.is_main_process:\n",
    "    tokenizer.save_pretrained(f\"{WORKSPACE_PATH}peft_model_optimized\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Função para gerar respostas\n",
    "def generate_response(title, content):\n",
    "    input_text = f\"Title: {title}\\nContent: {content}\\nResponse:\"\n",
    "    input_ids = tokenizer.encode(input_text, return_tensors='pt').to(accelerator.device)\n",
    "    \n",
    "    with torch.no_grad():\n",
    "        output = unwrapped_model.generate(input_ids, max_length=200, num_return_sequences=1, no_repeat_ngram_size=2, top_k=50, top_p=0.95)\n",
    "    \n",
    "    generated_text = tokenizer.decode(output[0], skip_special_tokens=True)\n",
    "    response = generated_text.split('Response:')[-1].strip()\n",
    "    \n",
    "    return response\n",
    "\n",
    "# Exemplo de uso\n",
    "title = \"Smartphone de última geração\"\n",
    "content = \"Este smartphone possui câmera de alta resolução, bateria de longa duração e processador potente.\"\n",
    "response = generate_response(title, content)\n",
    "print(f\"Título: {title}\")\n",
    "print(f\"Conteúdo: {content}\")\n",
    "print(f\"Resposta gerada: {response}\")"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
